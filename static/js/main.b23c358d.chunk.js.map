{"version":3,"sources":["Navbar.js","SelectActivity.js","App.js","serviceWorker.js","index.js","Inspect.js"],"names":["Navbar","props","state","this","step","bordered","defaultActiveKey","expandIconPosition","Panel","header","style","fontSize","account","project","executeIndex","inspectActivity","contractor","inspectTimes","inspectTiming","Component","SelectActivity","term","wbs","class","task","location","termIndex","classIndex","taskIndex","locationIndex","disabled","value","width","onChange","e","setState","target","map","n","index","key","onClick","execute","App","require","ipfsClient","host","port","protocol","importWBS","a","projectIndex","alert","projectName","window","web3","utils","toUtf8","projects","name","contract","methods","call","selectedPrj","fetch","then","response","json","str","toString","parseInt","substr","sheetContent","sheet","_executor","falseNum","i","_itemsState","length","_executed","_contractor","itemsState","itemsIndex","inspectionItems","itemsHash","inspectItems","inspectTimingArray","_timing","notes","photos","fillSheet","bind","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","eth","getAccounts","accounts","net","getId","networksId","networkData","Contract","networks","abi","address","projectsNum","prj","push","date","note","photo","send","from","once","reload","className","Inspect","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","ipfs","inspectResult","results","id","inspectNote","photoCapture","preventDefault","file","files","reader","FileReader","readAsArrayBuffer","photoBuffers","onloadend","Buffer","result","photoUpload","log","add","hash","submit","Date","fromUtf8","notesArray","photoBuffersArray","photosArray","align","border","rowSpan","colSpan","defaultValue","type","accept","capture"],"mappings":"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","file":"static/js/main.b23c358d.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport \"./App.css\"\r\nimport { Collapse } from 'antd'\r\n\r\nclass Navbar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.props.step == 0) {\r\n            return (\r\n                <div>\r\n                    <Collapse bordered={false} defaultActiveKey={['1']} expandIconPosition=\"right\">\r\n                        <Collapse.Panel header=\"區塊鏈自主查驗系統\">\r\n                            <p style={{ fontSize: 10 }}>使用者: {this.props.account}</p>\r\n                        </Collapse.Panel>\r\n                    </Collapse>\r\n                </div>\r\n            )\r\n        }\r\n        else if (this.props.step == 1) {\r\n            return (\r\n                <div>\r\n                    <Collapse bordered={false} defaultActiveKey={['1']} expandIconPosition=\"right\">\r\n                        <Collapse.Panel header=\"區塊鏈自主查驗系統\">\r\n                            <p style={{ fontSize: 10 }}>使用者: {this.props.account}</p>\r\n                            <p style={{ fontSize: 10 }}>專案名稱: {this.props.project}</p>\r\n                        </Collapse.Panel>\r\n                    </Collapse>\r\n                </div>\r\n            )\r\n        }\r\n        else if (this.props.step == 2) {\r\n            return (\r\n                <div>\r\n                    <Collapse bordered={false} defaultActiveKey={['1']} expandIconPosition=\"right\">\r\n                        <Collapse.Panel header=\"區塊鏈自主查驗系統\">\r\n                            <p style={{ fontSize: 10 }}>使用者: {this.props.account}</p>\r\n                            <p style={{ fontSize: 10 }}>專案名稱: {this.props.project}</p>\r\n                            <p style={{ fontSize: 10 }}>表單編號: {this.props.executeIndex}</p>\r\n                            <p style={{ fontSize: 10 }}>查驗項目: {this.props.inspectActivity}</p>\r\n                            <p style={{ fontSize: 10 }}>承攬廠商: {this.props.contractor}</p>\r\n                            <p style={{ fontSize: 10 }}>查驗狀態: {this.props.inspectTimes}</p>\r\n                            <p style={{ fontSize: 10 }}>查驗時機: {this.props.inspectTiming}</p>\r\n                        </Collapse.Panel>\r\n                    </Collapse>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n\r\n","import React, { Component } from 'react'\r\n\r\nclass SelectActivity extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            term: this.props.wbs.term,\r\n            class: this.props.wbs.class,\r\n            task: this.props.wbs.task,\r\n            location: this.props.wbs.location,\r\n            termIndex: 0,\r\n            classIndex: 0,\r\n            taskIndex: 0,\r\n            locationIndex: 0\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span style={{ fontSize: 18 }}>表單編號: </span>\r\n                <input disabled={true} value={10000000 * this.state.termIndex + 100000 * this.state.classIndex + 1000 * this.state.taskIndex + 1 * this.state.locationIndex}></input>\r\n                <p></p>\r\n                <span style={{ fontSize: 18 }}>工程類別: </span>\r\n                <select style={{ width: 200 }} onChange={e => this.setState({ termIndex: e.target.value, classIndex: 0, taskIndex: 0, locationIndex: 0 })}>\r\n                    {this.state.term.map((n, index) => (\r\n                        <option key={n} value={index}>{n}</option>\r\n                    ))}\r\n                </select>\r\n                <p></p>\r\n                <span style={{ fontSize: 18 }}>工程項目: </span>\r\n                <select style={{ width: 200 }} onChange={e => this.setState({ classIndex: e.target.value, taskIndex: 0, locationIndex: 0 })}>\r\n                    {this.state.class[this.state.term[this.state.termIndex]].map((n, index) => (\r\n                        <option key={n} value={index}>{n}</option>\r\n                    ))}\r\n                </select>\r\n                <p></p>\r\n                <span style={{ fontSize: 18 }}>細部工項: </span>\r\n                <select style={{ width: 200 }} onChange={e => this.setState({ taskIndex: e.target.value, locationIndex: 0 })}>\r\n                    {this.state.task[this.state.class[this.state.term[this.state.termIndex]][this.state.classIndex]].map((n, index) => (\r\n                        <option key={n} value={index}>{n}</option>\r\n                    ))}\r\n                </select>\r\n                <p></p>\r\n                <span style={{ fontSize: 18 }}>施工位置: </span>\r\n                <select style={{ width: 200 }} onChange={e => this.setState({ locationIndex: e.target.value })}>\r\n                    {this.state.location[this.state.task[this.state.class[this.state.term[this.state.termIndex]][this.state.classIndex]][this.state.taskIndex]].map((n, index) => (\r\n                        <option key={n} value={index}>{n}</option>\r\n                    ))}\r\n                </select>\r\n                <p></p>\r\n                <button onClick={this.props.execute} value={10000000 * this.state.termIndex + 100000 * this.state.classIndex + 1000 * this.state.taskIndex + 1 * this.state.locationIndex}>執行查驗</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SelectActivity\r\n","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport Web3 from \"web3\"\nimport Contract from \"./contracts/Contract.json\"\nimport Navbar from \"./Navbar\"\nimport SelectActivity from \"./SelectActivity\"\nimport Inspect from \"./Inspect\"\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      step: 0,\n      account: null,\n      contract: null,\n      projects: [],\n      projectIndex: -1,\n      projectName: \"\",\n      wbs: null,\n      executeIndex: 0,\n      inspectActivity: \"\",\n      contractor: \"\",\n      inspectTimes: \"\",\n      inspectTiming: \"\",\n      inspectItems: [],\n      itemsState: [],\n      notes: null,\n      photos: null\n    }\n\n    this.fillSheet = this.fillSheet.bind(this)\n  }\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const accounts = await window.web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const networksId = await window.web3.eth.net.getId()\n    const networkData = Contract.networks[networksId]\n    if (networkData) {\n      const contract = new window.web3.eth.Contract(Contract.abi, networkData.address)\n      this.setState({ contract })\n      const projects = []\n      const projectsNum = await contract.methods.projectIndex().call()\n      for (let i = 0; i < projectsNum; i++) {\n        let prj = await contract.methods.projects(i).call()\n        projects.push(prj)\n      }\n      this.setState({ projects })\n    } else {\n      window.alert('AutonomousInspectIon contract not deployed to detected network.')\n    }\n  }\n\n  importWBS = async () => {\n    if (this.state.projectIndex == -1) {\n      alert(\"請選擇專案\")\n      return\n    }\n    else {\n      this.setState({ projectName: window.web3.utils.toUtf8(this.state.projects[this.state.projectIndex].name) })\n      const selectedPrj = await this.state.contract.methods.projects(this.state.projectIndex).call()\n      const wbs = await fetch(\"https://ipfs.infura.io/ipfs/\" + selectedPrj.wbs).then(response => response.json())\n      this.setState({ wbs })\n      this.setState({ step: this.state.step + 1 })\n    }\n  }\n\n  execute = async (e) => {\n    const executeIndex = e.target.value\n    this.setState({ executeIndex })\n    let str = executeIndex.toString()\n    const inspectActivity =\n      this.state.wbs.term[parseInt(str.substr(0, 1))] + \" - \" +\n      this.state.wbs.class[this.state.wbs.term[parseInt(str.substr(0, 1))]][parseInt(str.substr(1, 2))] + \" - \" +\n      this.state.wbs.task[this.state.wbs.class[this.state.wbs.term[parseInt(str.substr(0, 1))]][parseInt(str.substr(1, 2))]][parseInt(str.substr(3, 2))] + \" - \" +\n      this.state.wbs.location[this.state.wbs.task[this.state.wbs.class[this.state.wbs.term[parseInt(str.substr(0, 1))]][parseInt(str.substr(1, 2))]][parseInt(str.substr(3, 2))]][parseInt(str.substr(5, 3))]\n    this.setState({ inspectActivity })\n    const sheet = await this.state.contract.methods.sheetContent(this.state.projectIndex, executeIndex).call()\n    if (sheet._executor == \"0x0000000000000000000000000000000000000000\") {\n      alert(\"表單尚未建立\")\n      return\n    }\n    else {\n      let falseNum = 0\n      for (let i = 0; i < sheet._itemsState.length; i++) {\n        if (sheet._itemsState[i] == 2) {\n          falseNum++\n        }\n      }\n      if (falseNum == 0 && sheet._executed != 0) {\n        alert(\"此項目已完成查驗\")\n        return\n      }\n      else {\n        this.setState({ contractor: window.web3.utils.toUtf8(sheet._contractor) })\n        this.setState({ itemsState: sheet._itemsState })\n        const itemsIndex = executeIndex - parseInt(str.substr(5, 3))\n        const itemsHash = await this.state.contract.methods.inspectionItems(this.state.projectIndex, itemsIndex).call()\n        const inspectItems = await fetch(\"https://ipfs.infura.io/ipfs/\" + itemsHash).then(response => response.json())\n        this.setState({ inspectItems })\n        const inspectTimingArray = [\"檢驗停留點\", \"施工中檢查\", \"施工完成檢查\"]\n        if (sheet._executed == 0) {\n          this.setState({ inspectTimes: \"初驗\", inspectTiming: inspectTimingArray[sheet._timing] })\n        }\n        else if (sheet._executed != 0) {\n          this.setState({ inspectTimes: \"複驗\", inspectTiming: inspectTimingArray[sheet._timing] })\n        }\n        this.setState({ step: this.state.step + 1 })\n      }\n    }\n  }\n\n  fillSheet(state, date, note, photo) {\n    this.state.contract.methods.fillSheet(this.state.projectIndex, this.state.executeIndex, state, date, note, photo).send({ from: this.state.account }).once(\"transactionHash\", () => { window.location.reload() })\n  }\n\n  render() {\n    if (this.state.step == 0) {\n      return (\n        <div>\n          <Navbar\n            step={this.state.step}\n            account={this.state.account} />\n          <p></p>\n          <section className=\"App\">\n            <span style={{ fontSize: 18 }}>請選擇專案: </span>\n            <select onChange={e => this.setState({ projectIndex: e.target.value })} style={{ width: 200 }}>\n              <option key={-1}>請選擇</option>\n              {this.state.projects.map((prj, index) => (\n                <option key={index} value={index}>{window.web3.utils.toUtf8(prj.name)}</option>\n              ))}\n            </select>\n            <span> </span>\n            <button onClick={this.importWBS}>確認</button>\n          </section>\n        </div>\n      )\n    }\n    else if (this.state.step == 1) {\n      return (\n        <div>\n          <Navbar\n            step={this.state.step}\n            account={this.state.account}\n            project={this.state.projectName} />\n          <p></p>\n          <section className=\"App\">\n            <SelectActivity\n              wbs={this.state.wbs}\n              execute={this.execute} />\n          </section>\n        </div>\n      )\n    }\n    else if (this.state.step == 2) {\n      return (\n        <div>\n          <Navbar\n            step={this.state.step}\n            account={this.state.account}\n            project={this.state.projectName}\n            executeIndex={this.state.executeIndex}\n            inspectActivity={this.state.inspectActivity}\n            contractor={this.state.contractor}\n            inspectTimes={this.state.inspectTimes}\n            inspectTiming={this.state.inspectTiming} />\n          <Inspect\n            inspectItems={this.state.inspectItems}\n            itemsState={this.state.itemsState}\n            fillSheet={this.fillSheet} />\n        </div>\n      )\n    }\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react'\r\nimport Web3 from \"web3\"\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\r\n\r\nclass Inspect extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            results: this.props.itemsState,\r\n            notes: null,\r\n            photoBuffers: null,\r\n            photos: null\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        const notesArray = []\r\n        const photoBuffersArray = []\r\n        const photosArray = []\r\n        for (let i = 0; i < this.props.inspectItems.length; i++) {\r\n            notesArray.push(\"\")\r\n            photoBuffersArray.push(\"\")\r\n            photosArray.push(\"\")\r\n        }\r\n        this.setState({ notes: notesArray })\r\n        this.setState({ photoBuffers: photoBuffersArray })\r\n        this.setState({ photos: photosArray })\r\n    }\r\n\r\n    inspectResult = e => {\r\n        let results = this.state.results\r\n        results[e.target.id] = e.target.value\r\n        this.setState({ results })\r\n    }\r\n\r\n    inspectNote = e => {\r\n        let notes = this.state.notes\r\n        notes[e.target.id] = e.target.value\r\n        this.setState({ notes })\r\n    }\r\n\r\n    photoCapture = e => {\r\n        e.preventDefault()\r\n        let file = e.target.files[0]\r\n        const reader = new window.FileReader()\r\n        reader.readAsArrayBuffer(file)\r\n        let photoBuffers = this.state.photoBuffers\r\n        let id = e.target.id\r\n        reader.onloadend = () => {\r\n            photoBuffers[id] = Buffer(reader.result)\r\n            this.setState({ photoBuffers })\r\n        }\r\n    }\r\n\r\n    photoUpload = e => {\r\n        e.preventDefault()\r\n        console.log(\"Submitting file to ipfs...\")\r\n        let id = e.target.id\r\n        ipfs.add(this.state.photoBuffers[id], (error, result) => {\r\n            console.log('Ipfs result', result)\r\n            if (error) {\r\n                console.error(error)\r\n                return\r\n            }\r\n            let photos = this.state.photos\r\n            photos[id] = result[0].hash\r\n            this.setState({ photos })\r\n        })\r\n    }\r\n\r\n    submit = () => {\r\n        let falseNum = 0\r\n        let note = \"\"\r\n        let photo = \"\"\r\n        for (let i = 0; i < this.state.results.length; i++) {\r\n            if (this.state.results[i] == 0) {\r\n                falseNum++\r\n                continue\r\n            }\r\n            else {\r\n                if (i == (this.state.results.length - 1)) {\r\n                    note += this.state.notes[i]\r\n                    photo += this.state.photos[i]\r\n                }\r\n                else {\r\n                    let n = this.state.notes[i] + \"@\"\r\n                    note += n\r\n                    let p = this.state.photos[i] + \"@\"\r\n                    photo += p\r\n                }\r\n            }\r\n        }\r\n        if (falseNum != 0) {\r\n            alert(\"請完成表單填寫\")\r\n        }\r\n        else {\r\n            const date = new Date()\r\n            const notes = window.web3.utils.fromUtf8(note)\r\n            const photos = window.web3.utils.fromUtf8(photo)\r\n            this.props.fillSheet(this.state.results, window.web3.utils.fromUtf8(date.toString()), notes, photos)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div align=\"center\">\r\n                <p></p>\r\n                <table border=\"1\" style={{ width: \"95%\" }}>\r\n                    {this.props.inspectItems.map((n, index) => (\r\n                        <tbody key={index}>\r\n                            <tr>\r\n                                <td rowSpan=\"2\" style={{ width: \"10%\" }}>#{index + 1}</td>\r\n                                <td colSpan=\"3\" style={{ fontSize: 18 }}>{n}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{ width: \"27%\" }}>\r\n                                    <span style={{ fontSize: 12 }}>查驗結果: </span>\r\n                                    <p style={{ fontSize: 8 }}></p>\r\n                                    <select id={index} onChange={this.inspectResult} defaultValue={this.props.itemsState[index]}>\r\n                                        <option value={0}>空白</option>\r\n                                        <option value={1}>合格</option>\r\n                                        <option value={2}>有缺失需改正</option>\r\n                                        <option value={3}>缺失立即改善</option>\r\n                                        <option value={4}>無此查驗項目</option>\r\n                                    </select>\r\n                                </td>\r\n                                <td style={{ width: \"27%\" }}>\r\n                                    <span style={{ fontSize: 12 }}>備註: </span>\r\n                                    <p style={{ fontSize: 8 }}></p>\r\n                                    <input id={index} onChange={this.inspectNote}></input>\r\n                                </td>\r\n                                <td style={{ width: \"36%\" }}>\r\n                                    <span style={{ fontSize: 12 }}>查驗照片: </span>\r\n                                    <p style={{ fontSize: 8 }}></p>\r\n                                    <input id={index} type=\"file\" accept=\"image/*\" capture=\"camera\" style={{ width: \"80%\" }} onChange={this.photoCapture}></input>\r\n                                    {(this.state.photos[index] == \"\")\r\n                                        ? <button id={index} onClick={this.photoUpload}>↑</button>\r\n                                        : <span>已上傳</span>\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    ))}\r\n                </table>\r\n                <p></p>\r\n                <button onClick={this.submit}>確認</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inspect\r\n"],"sourceRoot":""}